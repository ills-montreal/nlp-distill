from datasets import load_dataset

hub_urls = [
    "mteb/cqadupstack-android",
    "mteb/climate-fever",
    "mteb/arguana",
    "mteb/trec-covid",
    "mteb/touche2020",
    "mteb/scifact",
    "mteb/scidocs",
    "mteb/scidocs-reranking",
    "mteb/stackoverflowdupquestions-reranking",
    "mteb/askubuntudupquestions-reranking",
    "mteb/norquad_retrieval",
    "mteb/norquad_retrieval",
    "mteb/quora",
    "mteb/nq",
    "mteb/nfcorpus",
    "mteb/msmarco",
    "mteb/hotpotqa",
    "mteb/fiqa",
    "mteb/fever",
    "mteb/dbpedia",
    "mteb/cqadupstack-wordpress",
    "mteb/cqadupstack-webmasters",
    "mteb/cqadupstack-unix",
    "mteb/cqadupstack-tex",
    "mteb/cqadupstack-stats",
    "mteb/cqadupstack-programmers",
    "mteb/cqadupstack-physics",
    "mteb/cqadupstack-mathematica",
    "mteb/cqadupstack-gis",
    "mteb/cqadupstack-gaming",
    "mteb/cqadupstack-english",
    "mteb/cqadupstack-android",
    "mteb/climate-fever",
    "mteb/bucc-bitext-mining",
    "mteb/tatoeba-bitext-mining",
    "strombergnlp/bornholmsk_parallel",
    "mteb/amazon_counterfactual",
    "mteb/amazon_polarity",
    "mteb/amazon_reviews_multi",
    "mteb/banking77",
    "mteb/emotion",
    "mteb/imdb",
    "mteb/amazon_massive_intent",
    "mteb/amazon_massive_scenario",
    "mteb/mtop_domain",
    "mteb/mtop_intent",
    "mteb/toxic_conversations_50k",
    "mteb/tweet_sentiment_extraction",
    "DDSC/angry-tweets",
    "DDSC/dkhate",
    "AI-Sweden/SuperLim",
    "danish_political_comments",
    "DDSC/lcc",
    "ScandEval/norec-mini",
    "strombergnlp/nordic_langid",
    "NbAiLab/norwegian_parliament",
    "ScandEval/scala-da",
    "ScandEval/scala-nb",
    "ScandEval/scala-nn",
    "ScandEval/scala-sv",
    "ScandEval/swerec-mini",
    "PL-MTEB/cbd",
    "PL-MTEB/polemo2_in",
    "PL-MTEB/polemo2_out",
    "PL-MTEB/allegro-reviews",
    "laugustyniak/abusive-clauses-pl",
    "mteb/arxiv-clustering-p2p",
    "mteb/arxiv-clustering-s2s",
    "mteb/biorxiv-clustering-p2p",
    "mteb/biorxiv-clustering-s2s",
    "slvnwhrl/blurbs-clustering-p2p",
    "slvnwhrl/blurbs-clustering-s2s",
    "mteb/medrxiv-clustering-p2p",
    "mteb/medrxiv-clustering-s2s",
    "mteb/reddit-clustering",
    "mteb/reddit-clustering-p2p",
    "mteb/stackexchange-clustering",
    "mteb/stackexchange-clustering-p2p",
    "slvnwhrl/tenkgnad-clustering-p2p",
    "slvnwhrl/tenkgnad-clustering-s2s",
    "mteb/twentynewsgroups-clustering",
    "PL-MTEB/8tags-clustering",
    "mteb/sprintduplicatequestions-pairclassification",
    "mteb/twittersemeval2015-pairclassification",
    "mteb/twitterurlcorpus-pairclassification",
    "PL-MTEB/ppc-pairclassification",
    "PL-MTEB/psc-pairclassification",
    "PL-MTEB/sicke-pl-pairclassification",
    "PL-MTEB/cdsce-pairclassification",
    "mteb/askubuntudupquestions-reranking",
    "mteb/mind_small",
    "mteb/scidocs-reranking",
    "mteb/stackoverflowdupquestions-reranking",
    "BeIR/arguana",
    "BeIR/climate-fever",
    "BeIR/cqadupstack-qrels",
    "BeIR/cqadupstack-qrels",
    "BeIR/cqadupstack-qrels",
    "BeIR/cqadupstack-qrels",
    "BeIR/cqadupstack-qrels",
    "BeIR/cqadupstack-qrels",
    "BeIR/cqadupstack-qrels",
    "BeIR/cqadupstack-qrels",
    "BeIR/cqadupstack-qrels",
    "BeIR/cqadupstack-qrels",
    "BeIR/cqadupstack-qrels",
    "BeIR/cqadupstack-qrels",
    "BeIR/cqadupstack-qrels",
    "BeIR/cqadupstack-qrels",
    "BeIR/cqadupstack-qrels",
    "BeIR/cqadupstack-qrels",
    "BeIR/cqadupstack-qrels",
    "BeIR/cqadupstack-qrels",
    "BeIR/dbpedia-entity",
    "BeIR/fever",
    "BeIR/fiqa",
    "BeIR/hotpotqa",
    "BeIR/msmarco",
    "BeIR/msmarco-v2",
    "BeIR/nfcorpus",
    "BeIR/nq",
    "BeIR/quora",
    "BeIR/scidocs",
    "BeIR/scifact",
    "BeIR/webis-touche2020",
    "BeIR/trec-covid",
    "clarin-knext/arguana-pl",
    "clarin-knext/dbpedia-pl",
    "clarin-knext/fiqa-pl",
    "clarin-knext/hotpotqa-pl",
    "clarin-knext/msmarco-pl",
    "clarin-knext/nfcorpus-pl",
    "clarin-knext/nq-pl",
    "clarin-knext/quora-pl",
    "clarin-knext/scidocs-pl",
    "clarin-knext/scifact-pl",
    "AI-Sweden/SuperLim",
    "mteb/biosses-sts",
    "mteb/sickr-sts",
    "mteb/sts12-sts",
    "mteb/sts13-sts",
    "mteb/sts14-sts",
    "mteb/sts15-sts",
    "mteb/sts16-sts",
    "mteb/sts17-crosslingual-sts",
    "mteb/sts22-crosslingual-sts",
    "mteb/stsbenchmark-sts",
    "PL-MTEB/sickr-pl-sts",
    "PL-MTEB/cdscr-sts",
    "mteb/summeval",
]

if __name__ == "__main__":
    print("Downloading datasets")
    for url in hub_urls:
        try:
            print(f"Downloading {url}")
            load_dataset(url)
        except Exception as e:
            try:
                load_dataset(url, "queries")
                load_dataset(url, "corpus")
            except Exception as e:
                print(f"Error with {url}: {e}")
                continue
